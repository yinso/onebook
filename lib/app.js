// Generated by CoffeeScript 1.4.0
(function() {
  var BASE, baseConfigure, baseErrorHandler, devConfigure, express, fs, http, init, initRoutes, ncp, path, run, signedSecret;

  path = require('path');

  fs = require('fs');

  BASE = path.join(__dirname, '..');

  express = require('express');

  http = require('http');

  ncp = require('ncp').ncp;

  baseErrorHandler = function(options) {
    return function(err, req, res, next) {
      var accept;
      console.log('**********************************************************************');
      console.log('REQUEST_ERROR: ', req.method, req.url, err);
      console.log('**********************************************************************');
      if (err.status) {
        res.statusCode = err.status;
      }
      if (err.statusCode < 400) {
        res.statusCode = 500;
      }
      if ('prod' !== env) {
        console.error(err.stack);
      }
      accept = req.headers.accept || '';
      return res.json(err.status, err);
    };
  };

  signedSecret = 'this-is-the-secret';

  baseConfigure = function(app, basePath) {
    app.set('port', process.env.PORT || 3030);
    app.set('baseUrl', process.env.BASE_URL || 'http://FIXME');
    app.use(function(req, res, next) {
      res.header('Access-Control-Allow-Origin', '*');
      res.header('Access-Control-Allow-Headers', 'X-Requested-With');
      return next();
    });
    app.use('/img', express["static"](path.join(basePath, 'img')));
    app.use('/js', express["static"](path.join(basePath, 'js')));
    app.use('/css', express["static"](path.join(basePath, 'css')));
    app.use('/content', express["static"](path.join(basePath, 'content')));
    app.use(express.favicon());
    app.use(express.cookieParser(signedSecret));
    app.use(express.bodyParser({
      keepExtensions: true,
      hash: 'sha256'
    }));
    app.use(express.methodOverride());
    app.use(app.router);
    return app.use(baseErrorHandler({
      showStack: true,
      dumpExceptions: true
    }));
  };

  devConfigure = function(app) {
    return app.use(express.errorHandler({
      showStack: true,
      dumpExceptions: true
    }));
  };

  initRoutes = function(app) {
    var file, filePath, files, module, route, routesPath, _i, _len, _results;
    routesPath = path.join(BASE, 'routes');
    files = fs.readdirSync(routesPath);
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      module = path.basename(file, path.extname(file));
      filePath = path.join(BASE, 'routes', module);
      route = require(filePath);
      _results.push(route.init(app, (module === 'index' ? '/' : "/" + module)));
    }
    return _results;
  };

  run = function(basePath) {
    var app;
    app = express();
    baseConfigure(app, basePath);
    devConfigure(app);
    initRoutes(app);
    return http.createServer(app).listen(app.get('port'));
  };

  init = function(basePath) {
    return ncp(path.join(BASE, 'public'), basePath, function(err) {
      if (err) {
        return console.error("onebook init failed", err);
      } else {
        return console.log("onebook init success. Run onebook and point browser to http://localhost:3030");
      }
    });
  };

  module.exports = {
    run: run,
    init: init
  };

}).call(this);
